// Load the service account credentials for OAuth authentication
var CLIENT_ID = '.apps.googleusercontent.com'; // Replace with your Google Client ID
var CLIENT_SECRET = 'XXXXX-XXXXX-XXXXXXXXXXXXXX'; // Replace with your Google Client Secret
var CUSTOMER_ID = 'XXXXXXXXX'; // Replace with your Google Customer ID

// Define column indices for data in the spreadsheet
OU_COLUMN_INDEX = 0; // Column index for Organizational Unit (OU) name
PARENT_OU_COLUMN_INDEX = 1; // Column index for Parent OU name (not used in this script)

// Function to create a custom menu in Google Sheets when the spreadsheet is opened
function onOpen() {
  SpreadsheetApp
    .getActiveSpreadsheet()
    .addMenu('Custom Script', [
      { name: 'Add Wifi Settings', functionName: 'addWifi' }, // Adds 'Add Wifi Settings' to the menu
    ]);
}

// Function to add WiFi settings to Organizational Units
function addWifi() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheetByName('Wifi Settings'); // Access the sheet named 'Wifi Settings'
  var data = sheet.getDataRange().getValues(); // Retrieve all data from the sheet
  var service = getOAuthService(); // Initialize OAuth service for authentication

  // Check if the script has OAuth access, handle authorization if not
  if (!service.hasAccess()) {
    var ui = SpreadsheetApp.getUi();
    var alertString = service.getAuthorizationUrl();
    Logger.log('Please authorize the script by visiting this URL: ' + alertString);
    ui.alert('Auth Error: ' + alertString); // Show authorization error and URL to user
    return;
  }
  
  // Define options for HTTP requests
  var options = {
    method: 'post',
    headers: {
      Authorization: 'Bearer ' + service.getAccessToken(), // OAuth token for authorization
      'Content-Type': 'application/json'
    },
    muteHttpExceptions: true
  };
  
  // Loop through each row in the sheet and apply WiFi settings
  for (var i = PARENT_OU_COLUMN_INDEX; i < data.length; i++) {
    var row = data[i];
    // Extract data from each column
    var ouName = row[0];
    var ouID = getOrgUnitId(ouName);

    var allowForChromeUsers = row[1];
    var allowForChromeDevices = row[2];
    var name = row[3];
    var ssid = row[4];
    var hiddenSsid = row[5];
    var automaticallyConnect = row[6];
    var authType = row[7];
    var password = row[8];
    var allowIpConfiguration = row[9];
    var allowNameServersConfiguration = row[10];
    var nameServerSelection = row[11];
    var customNameServers = row[12];

    // Construct payload based on the settings

    if (nameServerSelection == "CUSTOM"){
      nameServerSelection = "NAME_SERVERS_ENUM_CUSTOM"
        var payload = {
          "name": name,
          "targetResource": "orgunits/" + ouID,
          "settings": [
            {
              "policySchema": "chrome.networks.wifi.Details",
              "value": {
                "details": {
                  "ssid": ssid,
                  "hiddenSsid": hiddenSsid,
                  "automaticallyConnect": automaticallyConnect,
                  "security": authType,
                  "passphrase": password,
                  "proxySettings": {
                    "type": "Direct"
                  },
                  "allowIpConfiguration": allowIpConfiguration,
                  "allowNameServersConfiguration": allowNameServersConfiguration,
                  "nameServerSelection": nameServerSelection,
                  "customNameServers": [customNameServers]
                }
              }
            },
            {
              "policySchema":"chrome.networks.wifi.AllowForChromeDevices",
              "value":{"allowForChromeDevices":allowForChromeDevices}
            },
            {
              "policySchema":"chrome.networks.wifi.AllowForChromeUsers",
              "value":{"allowForChromeUsers":allowForChromeUsers}
            }
          ]
        };
  } else if (nameServerSelection == "AUTOMATIC"){
      nameServerSelection = "NAME_SERVERS_ENUM_AUTOMATIC"
        var payload = {
          "name": name,
          "targetResource": "orgunits/" + ouID,
          "settings": [
            {
              "policySchema": "chrome.networks.wifi.Details",
              "value": {
                "details": {
                  "ssid": ssid,
                  "hiddenSsid": hiddenSsid,
                  "automaticallyConnect": automaticallyConnect,
                  "security": authType,
                  "passphrase": password,
                  "proxySettings": {
                    "type": "Direct"
                  },
                  "allowIpConfiguration": allowIpConfiguration,
                  "allowNameServersConfiguration": allowNameServersConfiguration,
                  "nameServerSelection": nameServerSelection
                }
              }
            },
            {
              "policySchema":"chrome.networks.wifi.AllowForChromeDevices",
              "value":{"allowForChromeDevices":allowForChromeDevices}
            },
            {
              "policySchema":"chrome.networks.wifi.AllowForChromeUsers",
              "value":{"allowForChromeUsers":allowForChromeUsers}
            }
          ]
        };
  }
    // API endpoint for setting WiFi policies
    var url = 'https://chromepolicy.googleapis.com/v1/customers/' + CUSTOMER_ID + '/policies/networks:defineNetwork';
    options.payload = JSON.stringify(payload); // Convert payload to JSON string
    var response = UrlFetchApp.fetch(url, options); // Send request to API

    // Handle API response
    var result = JSON.parse(response.getContentText());
    if (response.getResponseCode() == 200) {
      Logger.log('Successfully applied WiFi settings for OU: ' + ouName);
    } else {
      Logger.log('Failed to apply WiFi settings for OU: ' + ouName + '. Error: ' + result.error.message);
    }
  }
}

// Function to initialize and configure the OAuth2 service
function getOAuthService() {
  // Configure OAuth service with necessary URLs and credentials
  return OAuth2.createService('ChromePolicy')
    .setAuthorizationBaseUrl('https://accounts.google.com/o/oauth2/auth')
    .setTokenUrl('https://oauth2.googleapis.com/token')
    .setClientId(CLIENT_ID)
    .setClientSecret(CLIENT_SECRET)
    .setCallbackFunction('authCallback')  // Callback function after OAuth
    .setPropertyStore(PropertiesService.getUserProperties())
    .setScope('https://www.googleapis.com/auth/chrome.management.policy');
}

// Callback function for OAuth2, called after user authorization
function authCallback(request) {
  var service = getOAuthService();
  var authorized = service.handleCallback(request);
  if (authorized) {
    return HtmlService.createHtmlOutput('Success!'); // Display success message
  } else {
    return HtmlService.createHtmlOutput('Denied.'); // Display denied message
  }
}

// Function to retrieve the Org Unit ID from its name
function getOrgUnitId(orgUnitName) {
  // Fetch all Org Units and find the one matching the provided name
  var customerId = 'my_customer';  // Alias for the customer ID
  var orgUnits = AdminDirectory.Orgunits.list(customerId, {type: 'all'}).organizationUnits;
  for (var i = 0; i < orgUnits.length; i++) {
    var orgUnit = orgUnits[i];
    if (orgUnit.name == orgUnitName) {
      return orgUnit.orgUnitId.slice(3); // Return the Org Unit ID
    }
  }
  throw new Error('OrgUnit not found: ' + orgUnitName); // Error if Org Unit not found
}

// Function to reset the OAuth2 service, useful for re-authentication
function resetOAuthService() {
  OAuth2.createService('ChromePolicy').reset();
}
